// Code generated by MockGen. DO NOT EDIT.
// Source: service/wallet_service.go

// Package mock is a generated GoMock package.
package mock

import (
	model "bootcamp/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletService is a mock of IWalletService interface.
type MockIWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletServiceMockRecorder
}

// MockIWalletServiceMockRecorder is the mock recorder for MockIWalletService.
type MockIWalletServiceMockRecorder struct {
	mock *MockIWalletService
}

// NewMockIWalletService creates a new mock instance.
func NewMockIWalletService(ctrl *gomock.Controller) *MockIWalletService {
	mock := &MockIWalletService{ctrl: ctrl}
	mock.recorder = &MockIWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletService) EXPECT() *MockIWalletServiceMockRecorder {
	return m.recorder
}

// BalanceOfUser mocks base method.
func (m *MockIWalletService) BalanceOfUser(username string) (model.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOfUser", username)
	ret0, _ := ret[0].(model.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOfUser indicates an expected call of BalanceOfUser.
func (mr *MockIWalletServiceMockRecorder) BalanceOfUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOfUser", reflect.TypeOf((*MockIWalletService)(nil).BalanceOfUser), username)
}

// PostBalanceByUser mocks base method.
func (m *MockIWalletService) PostBalanceByUser(username string, balance int) (model.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBalanceByUser", username, balance)
	ret0, _ := ret[0].(model.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBalanceByUser indicates an expected call of PostBalanceByUser.
func (mr *MockIWalletServiceMockRecorder) PostBalanceByUser(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBalanceByUser", reflect.TypeOf((*MockIWalletService)(nil).PostBalanceByUser), username, balance)
}

// PutBalanceOfUser mocks base method.
func (m *MockIWalletService) PutBalanceOfUser(username string) (model.WalletResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBalanceOfUser", username)
	ret0, _ := ret[0].(model.WalletResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBalanceOfUser indicates an expected call of PutBalanceOfUser.
func (mr *MockIWalletServiceMockRecorder) PutBalanceOfUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBalanceOfUser", reflect.TypeOf((*MockIWalletService)(nil).PutBalanceOfUser), username)
}

// Wallets mocks base method.
func (m *MockIWalletService) Wallets() (model.WalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].(model.WalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallets indicates an expected call of Wallets.
func (mr *MockIWalletServiceMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockIWalletService)(nil).Wallets))
}
